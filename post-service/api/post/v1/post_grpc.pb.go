// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.1
// source: api/post/v1/post.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostSrvClient is the client API for PostSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostSrvClient interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostReply, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostReply, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostReply, error)
	GetPostPreview(ctx context.Context, in *GetPostPreviewRequest, opts ...grpc.CallOption) (*GetPostPreviewReply, error)
	GetPostDetail(ctx context.Context, in *GetPostDetailRequest, opts ...grpc.CallOption) (*GetPostDetailReply, error)
	ListPostPreview(ctx context.Context, in *ListPostPreviewRequest, opts ...grpc.CallOption) (*ListPostPreviewReply, error)
	AddPostLike(ctx context.Context, in *AddPostLikeRequest, opts ...grpc.CallOption) (*AddPostLikeReply, error)
}

type postSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewPostSrvClient(cc grpc.ClientConnInterface) PostSrvClient {
	return &postSrvClient{cc}
}

func (c *postSrvClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostReply, error) {
	out := new(CreatePostReply)
	err := c.cc.Invoke(ctx, "/api.post.v1.PostSrv/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSrvClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostReply, error) {
	out := new(UpdatePostReply)
	err := c.cc.Invoke(ctx, "/api.post.v1.PostSrv/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSrvClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostReply, error) {
	out := new(DeletePostReply)
	err := c.cc.Invoke(ctx, "/api.post.v1.PostSrv/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSrvClient) GetPostPreview(ctx context.Context, in *GetPostPreviewRequest, opts ...grpc.CallOption) (*GetPostPreviewReply, error) {
	out := new(GetPostPreviewReply)
	err := c.cc.Invoke(ctx, "/api.post.v1.PostSrv/GetPostPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSrvClient) GetPostDetail(ctx context.Context, in *GetPostDetailRequest, opts ...grpc.CallOption) (*GetPostDetailReply, error) {
	out := new(GetPostDetailReply)
	err := c.cc.Invoke(ctx, "/api.post.v1.PostSrv/GetPostDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSrvClient) ListPostPreview(ctx context.Context, in *ListPostPreviewRequest, opts ...grpc.CallOption) (*ListPostPreviewReply, error) {
	out := new(ListPostPreviewReply)
	err := c.cc.Invoke(ctx, "/api.post.v1.PostSrv/ListPostPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postSrvClient) AddPostLike(ctx context.Context, in *AddPostLikeRequest, opts ...grpc.CallOption) (*AddPostLikeReply, error) {
	out := new(AddPostLikeReply)
	err := c.cc.Invoke(ctx, "/api.post.v1.PostSrv/AddPostLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostSrvServer is the server API for PostSrv service.
// All implementations must embed UnimplementedPostSrvServer
// for forward compatibility
type PostSrvServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostReply, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostReply, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostReply, error)
	GetPostPreview(context.Context, *GetPostPreviewRequest) (*GetPostPreviewReply, error)
	GetPostDetail(context.Context, *GetPostDetailRequest) (*GetPostDetailReply, error)
	ListPostPreview(context.Context, *ListPostPreviewRequest) (*ListPostPreviewReply, error)
	AddPostLike(context.Context, *AddPostLikeRequest) (*AddPostLikeReply, error)
	mustEmbedUnimplementedPostSrvServer()
}

// UnimplementedPostSrvServer must be embedded to have forward compatible implementations.
type UnimplementedPostSrvServer struct {
}

func (UnimplementedPostSrvServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostSrvServer) UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostSrvServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostSrvServer) GetPostPreview(context.Context, *GetPostPreviewRequest) (*GetPostPreviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostPreview not implemented")
}
func (UnimplementedPostSrvServer) GetPostDetail(context.Context, *GetPostDetailRequest) (*GetPostDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostDetail not implemented")
}
func (UnimplementedPostSrvServer) ListPostPreview(context.Context, *ListPostPreviewRequest) (*ListPostPreviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostPreview not implemented")
}
func (UnimplementedPostSrvServer) AddPostLike(context.Context, *AddPostLikeRequest) (*AddPostLikeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPostLike not implemented")
}
func (UnimplementedPostSrvServer) mustEmbedUnimplementedPostSrvServer() {}

// UnsafePostSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostSrvServer will
// result in compilation errors.
type UnsafePostSrvServer interface {
	mustEmbedUnimplementedPostSrvServer()
}

func RegisterPostSrvServer(s grpc.ServiceRegistrar, srv PostSrvServer) {
	s.RegisterService(&PostSrv_ServiceDesc, srv)
}

func _PostSrv_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSrvServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.post.v1.PostSrv/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSrvServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSrv_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSrvServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.post.v1.PostSrv/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSrvServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSrv_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSrvServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.post.v1.PostSrv/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSrvServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSrv_GetPostPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSrvServer).GetPostPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.post.v1.PostSrv/GetPostPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSrvServer).GetPostPreview(ctx, req.(*GetPostPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSrv_GetPostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSrvServer).GetPostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.post.v1.PostSrv/GetPostDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSrvServer).GetPostDetail(ctx, req.(*GetPostDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSrv_ListPostPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSrvServer).ListPostPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.post.v1.PostSrv/ListPostPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSrvServer).ListPostPreview(ctx, req.(*ListPostPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostSrv_AddPostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSrvServer).AddPostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.post.v1.PostSrv/AddPostLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSrvServer).AddPostLike(ctx, req.(*AddPostLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostSrv_ServiceDesc is the grpc.ServiceDesc for PostSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.post.v1.PostSrv",
	HandlerType: (*PostSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostSrv_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostSrv_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostSrv_DeletePost_Handler,
		},
		{
			MethodName: "GetPostPreview",
			Handler:    _PostSrv_GetPostPreview_Handler,
		},
		{
			MethodName: "GetPostDetail",
			Handler:    _PostSrv_GetPostDetail_Handler,
		},
		{
			MethodName: "ListPostPreview",
			Handler:    _PostSrv_ListPostPreview_Handler,
		},
		{
			MethodName: "AddPostLike",
			Handler:    _PostSrv_AddPostLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/post/v1/post.proto",
}
