// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/post/v1/post.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostRequestMultiError, or nil if none found.
func (m *CreatePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 6 {
		err := CreatePostRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CreatePostRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePostRequestMultiError(errors)
	}

	return nil
}

// CreatePostRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePostRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostRequestMultiError) AllErrors() []error { return m }

// CreatePostRequestValidationError is the validation error returned by
// CreatePostRequest.Validate if the designated constraints aren't met.
type CreatePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostRequestValidationError) ErrorName() string {
	return "CreatePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostRequestValidationError{}

// Validate checks the field values on CreatePostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostReplyMultiError, or nil if none found.
func (m *CreatePostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostReplyValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePostReplyMultiError(errors)
	}

	return nil
}

// CreatePostReplyMultiError is an error wrapping multiple validation errors
// returned by CreatePostReply.ValidateAll() if the designated constraints
// aren't met.
type CreatePostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostReplyMultiError) AllErrors() []error { return m }

// CreatePostReplyValidationError is the validation error returned by
// CreatePostReply.Validate if the designated constraints aren't met.
type CreatePostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostReplyValidationError) ErrorName() string { return "CreatePostReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreatePostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostReplyValidationError{}

// Validate checks the field values on UpdatePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostRequestMultiError, or nil if none found.
func (m *UpdatePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _UpdatePostRequest_Type_InLookup[m.GetType()]; !ok {
		err := UpdatePostRequestValidationError{
			field:  "Type",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPid() < 1 {
		err := UpdatePostRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if m.Content != nil {
		// no validation rules for Content
	}

	if m.Status != nil {

		if _, ok := _UpdatePostRequest_Status_InLookup[m.GetStatus()]; !ok {
			err := UpdatePostRequestValidationError{
				field:  "Status",
				reason: "value must be in list [0 1 2 3 4]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Score != nil {
		// no validation rules for Score
	}

	if len(errors) > 0 {
		return UpdatePostRequestMultiError(errors)
	}

	return nil
}

// UpdatePostRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePostRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostRequestMultiError) AllErrors() []error { return m }

// UpdatePostRequestValidationError is the validation error returned by
// UpdatePostRequest.Validate if the designated constraints aren't met.
type UpdatePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostRequestValidationError) ErrorName() string {
	return "UpdatePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostRequestValidationError{}

var _UpdatePostRequest_Status_InLookup = map[int32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
}

var _UpdatePostRequest_Type_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on UpdatePostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostReplyMultiError, or nil if none found.
func (m *UpdatePostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostReplyValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePostReplyMultiError(errors)
	}

	return nil
}

// UpdatePostReplyMultiError is an error wrapping multiple validation errors
// returned by UpdatePostReply.ValidateAll() if the designated constraints
// aren't met.
type UpdatePostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostReplyMultiError) AllErrors() []error { return m }

// UpdatePostReplyValidationError is the validation error returned by
// UpdatePostReply.Validate if the designated constraints aren't met.
type UpdatePostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostReplyValidationError) ErrorName() string { return "UpdatePostReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostReplyValidationError{}

// Validate checks the field values on DeletePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostRequestMultiError, or nil if none found.
func (m *DeletePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	if len(errors) > 0 {
		return DeletePostRequestMultiError(errors)
	}

	return nil
}

// DeletePostRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePostRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostRequestMultiError) AllErrors() []error { return m }

// DeletePostRequestValidationError is the validation error returned by
// DeletePostRequest.Validate if the designated constraints aren't met.
type DeletePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostRequestValidationError) ErrorName() string {
	return "DeletePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostRequestValidationError{}

// Validate checks the field values on DeletePostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostReplyMultiError, or nil if none found.
func (m *DeletePostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return DeletePostReplyMultiError(errors)
	}

	return nil
}

// DeletePostReplyMultiError is an error wrapping multiple validation errors
// returned by DeletePostReply.ValidateAll() if the designated constraints
// aren't met.
type DeletePostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostReplyMultiError) AllErrors() []error { return m }

// DeletePostReplyValidationError is the validation error returned by
// DeletePostReply.Validate if the designated constraints aren't met.
type DeletePostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostReplyValidationError) ErrorName() string { return "DeletePostReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeletePostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostReplyValidationError{}

// Validate checks the field values on GetPostPreviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostPreviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostPreviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostPreviewRequestMultiError, or nil if none found.
func (m *GetPostPreviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostPreviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPid() < 1 {
		err := GetPostPreviewRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostPreviewRequestMultiError(errors)
	}

	return nil
}

// GetPostPreviewRequestMultiError is an error wrapping multiple validation
// errors returned by GetPostPreviewRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPostPreviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostPreviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostPreviewRequestMultiError) AllErrors() []error { return m }

// GetPostPreviewRequestValidationError is the validation error returned by
// GetPostPreviewRequest.Validate if the designated constraints aren't met.
type GetPostPreviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostPreviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostPreviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostPreviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostPreviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostPreviewRequestValidationError) ErrorName() string {
	return "GetPostPreviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostPreviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostPreviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostPreviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostPreviewRequestValidationError{}

// Validate checks the field values on GetPostPreviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostPreviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostPreviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostPreviewReplyMultiError, or nil if none found.
func (m *GetPostPreviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostPreviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostPreviewReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostPreviewReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostPreviewReplyValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostPreviewReplyMultiError(errors)
	}

	return nil
}

// GetPostPreviewReplyMultiError is an error wrapping multiple validation
// errors returned by GetPostPreviewReply.ValidateAll() if the designated
// constraints aren't met.
type GetPostPreviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostPreviewReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostPreviewReplyMultiError) AllErrors() []error { return m }

// GetPostPreviewReplyValidationError is the validation error returned by
// GetPostPreviewReply.Validate if the designated constraints aren't met.
type GetPostPreviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostPreviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostPreviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostPreviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostPreviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostPreviewReplyValidationError) ErrorName() string {
	return "GetPostPreviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostPreviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostPreviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostPreviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostPreviewReplyValidationError{}

// Validate checks the field values on GetPostDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostDetailRequestMultiError, or nil if none found.
func (m *GetPostDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPid() < 1 {
		err := GetPostDetailRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostDetailRequestMultiError(errors)
	}

	return nil
}

// GetPostDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetPostDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPostDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostDetailRequestMultiError) AllErrors() []error { return m }

// GetPostDetailRequestValidationError is the validation error returned by
// GetPostDetailRequest.Validate if the designated constraints aren't met.
type GetPostDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostDetailRequestValidationError) ErrorName() string {
	return "GetPostDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostDetailRequestValidationError{}

// Validate checks the field values on GetPostDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostDetailReplyMultiError, or nil if none found.
func (m *GetPostDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostDetailReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostDetailReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostDetailReplyValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostDetailReplyMultiError(errors)
	}

	return nil
}

// GetPostDetailReplyMultiError is an error wrapping multiple validation errors
// returned by GetPostDetailReply.ValidateAll() if the designated constraints
// aren't met.
type GetPostDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostDetailReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostDetailReplyMultiError) AllErrors() []error { return m }

// GetPostDetailReplyValidationError is the validation error returned by
// GetPostDetailReply.Validate if the designated constraints aren't met.
type GetPostDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostDetailReplyValidationError) ErrorName() string {
	return "GetPostDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostDetailReplyValidationError{}

// Validate checks the field values on ListPostPreviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostPreviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostPreviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostPreviewRequestMultiError, or nil if none found.
func (m *ListPostPreviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostPreviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 0 {
		err := ListPostPreviewRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 1 {
		err := ListPostPreviewRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if len(errors) > 0 {
		return ListPostPreviewRequestMultiError(errors)
	}

	return nil
}

// ListPostPreviewRequestMultiError is an error wrapping multiple validation
// errors returned by ListPostPreviewRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPostPreviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostPreviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostPreviewRequestMultiError) AllErrors() []error { return m }

// ListPostPreviewRequestValidationError is the validation error returned by
// ListPostPreviewRequest.Validate if the designated constraints aren't met.
type ListPostPreviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostPreviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostPreviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostPreviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostPreviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostPreviewRequestValidationError) ErrorName() string {
	return "ListPostPreviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostPreviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostPreviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostPreviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostPreviewRequestValidationError{}

// Validate checks the field values on ListPostPreviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostPreviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostPreviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostPreviewReplyMultiError, or nil if none found.
func (m *ListPostPreviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostPreviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostPreviewReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostPreviewReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostPreviewReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPostPreviewReplyMultiError(errors)
	}

	return nil
}

// ListPostPreviewReplyMultiError is an error wrapping multiple validation
// errors returned by ListPostPreviewReply.ValidateAll() if the designated
// constraints aren't met.
type ListPostPreviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostPreviewReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostPreviewReplyMultiError) AllErrors() []error { return m }

// ListPostPreviewReplyValidationError is the validation error returned by
// ListPostPreviewReply.Validate if the designated constraints aren't met.
type ListPostPreviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostPreviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostPreviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostPreviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostPreviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostPreviewReplyValidationError) ErrorName() string {
	return "ListPostPreviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostPreviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostPreviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostPreviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostPreviewReplyValidationError{}

// Validate checks the field values on AddPostLikeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPostLikeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostLikeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostLikeRequestMultiError, or nil if none found.
func (m *AddPostLikeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostLikeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPid() < 1 {
		err := AddPostLikeRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddPostLikeRequest_Like_InLookup[m.GetLike()]; !ok {
		err := AddPostLikeRequestValidationError{
			field:  "Like",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddPostLikeRequestMultiError(errors)
	}

	return nil
}

// AddPostLikeRequestMultiError is an error wrapping multiple validation errors
// returned by AddPostLikeRequest.ValidateAll() if the designated constraints
// aren't met.
type AddPostLikeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostLikeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostLikeRequestMultiError) AllErrors() []error { return m }

// AddPostLikeRequestValidationError is the validation error returned by
// AddPostLikeRequest.Validate if the designated constraints aren't met.
type AddPostLikeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostLikeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostLikeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostLikeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostLikeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostLikeRequestValidationError) ErrorName() string {
	return "AddPostLikeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPostLikeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostLikeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostLikeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostLikeRequestValidationError{}

var _AddPostLikeRequest_Like_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on AddPostLikeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddPostLikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPostLikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPostLikeReplyMultiError, or nil if none found.
func (m *AddPostLikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPostLikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddPostLikeReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddPostLikeReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPostLikeReplyValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddPostLikeReplyMultiError(errors)
	}

	return nil
}

// AddPostLikeReplyMultiError is an error wrapping multiple validation errors
// returned by AddPostLikeReply.ValidateAll() if the designated constraints
// aren't met.
type AddPostLikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPostLikeReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPostLikeReplyMultiError) AllErrors() []error { return m }

// AddPostLikeReplyValidationError is the validation error returned by
// AddPostLikeReply.Validate if the designated constraints aren't met.
type AddPostLikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPostLikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPostLikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPostLikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPostLikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPostLikeReplyValidationError) ErrorName() string { return "AddPostLikeReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddPostLikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPostLikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPostLikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPostLikeReplyValidationError{}

// Validate checks the field values on Post with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Post) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Post with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PostMultiError, or nil if none found.
func (m *Post) ValidateAll() error {
	return m.validate(true)
}

func (m *Post) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Author

	// no validation rules for Uid

	// no validation rules for Status

	// no validation rules for Score

	// no validation rules for ViewCount

	// no validation rules for LikeCount

	if m.IsDel != nil {
		// no validation rules for IsDel
	}

	if len(errors) > 0 {
		return PostMultiError(errors)
	}

	return nil
}

// PostMultiError is an error wrapping multiple validation errors returned by
// Post.ValidateAll() if the designated constraints aren't met.
type PostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostMultiError) AllErrors() []error { return m }

// PostValidationError is the validation error returned by Post.Validate if the
// designated constraints aren't met.
type PostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostValidationError) ErrorName() string { return "PostValidationError" }

// Error satisfies the builtin error interface
func (e PostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostValidationError{}

// Validate checks the field values on PostPreview with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostPreview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostPreview with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostPreviewMultiError, or
// nil if none found.
func (m *PostPreview) ValidateAll() error {
	return m.validate(true)
}

func (m *PostPreview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostPreviewValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostPreviewValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostPreviewValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostPreviewValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostPreviewValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostPreviewValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Author

	// no validation rules for Status

	// no validation rules for Score

	// no validation rules for ViewCount

	// no validation rules for LikeCount

	if len(errors) > 0 {
		return PostPreviewMultiError(errors)
	}

	return nil
}

// PostPreviewMultiError is an error wrapping multiple validation errors
// returned by PostPreview.ValidateAll() if the designated constraints aren't met.
type PostPreviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostPreviewMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostPreviewMultiError) AllErrors() []error { return m }

// PostPreviewValidationError is the validation error returned by
// PostPreview.Validate if the designated constraints aren't met.
type PostPreviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostPreviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostPreviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostPreviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostPreviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostPreviewValidationError) ErrorName() string { return "PostPreviewValidationError" }

// Error satisfies the builtin error interface
func (e PostPreviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostPreview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostPreviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostPreviewValidationError{}
